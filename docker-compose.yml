version: '3.8'
services:

  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    #   - ./frontend/:/frontend/
    depends_on:
      - backend
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-http.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    # volumes:
    #   - ./backend/:/backend/
    command: uvicorn app.api.main:app --reload --workers 1 --host 0.0.0.0 --port 8000
    env_file:
      - ./backend/.env
    ports:
      - 8000:8000
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)"
      - "traefik.http.services.backend.loadbalancer.server.port=80"

  db:
    image: postgres:13.3-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env
    expose:
      - 5432

volumes:
  postgres_data:

